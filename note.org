* OLSR
** Introduction
 - 用途：移动自治系统 mobile ad-hoc networks (MANETs)
 - *MPR* ：邻居节点的子集 通过减少需要转发的节点数有效控制洪泛
 - MPR的responsibility：forwarding control traffic、declaring link state information in the network
 - MPR将链路状态信息发给邻居MPR节点, 声明可达性
 - MPR的选择是双向的
*** OLSR Terminology
 - single/muliple OLSR interface node:
    A node which has single/multiple OLSR interfaces, participating in an OLSR routing domain
 - main address:在协议中节点的标志，唯一且固定
 - 2-hop neighbor/strict 2-hop neighbor
 - MPR: 如果节点A被节点B选为MPR，A将转发所有B发送的广播信息（保证信息未重复，TTL>1
 - 对称/非对称链接
 - 对称邻居节点：至少有一条对称链接的邻居节点
*** Applicabilt
 - OLSR是用于移动ad-hoc网络的主动路由协议,网络越大、越复杂，OLSR的优化效果越明显
 - 使用逐跳路由，即路由器将路由信息保存在本地
 - OLSR同时还可以用在通信双方不断变化的网络中
*** Protocol Overvie
 - 相比于传统的LS算法，OLSR保留了稳定性，同时使路由变得即插即用（routes immediately available）
 - 减少了传递路由控制信息的开销
 - 只需要发送部分链路状态（The minimal set of link state information required is, that all nodes, selected as MPRs, MUST declare the links to their MPR selectors.）
 - 通过减小发送控制信息的间隔，优化对拓扑信息变化的反应 
 - OLSR是一个独立的协议，不依靠与可靠的数据传输，即允许丢包
 - 不需要按顺序传递消
 - 提供协议扩展，如：睡眠模式操作，组播路由
 - 未改变IP数据包的结构，任何现有的IP栈都可以直接使用
*** Multipoint Relay
 - 减少在同一区域内的冗余控制信息传输
 - MPR集合的选择要能覆盖所有的symmetric strict 2-hop nodes
 - N节点的MPR集记作MPR（N）
 - MPR（N）是N的对称邻居节点中的满足下列条件的任意子集，
   - every node in the symmetric strict 2-hop neighborhood of N must have a symmetric link towards MPR(N).
 - MPR selector set：每个节点保存将自己设为MPR节点的相邻节点的信息
 - N向MPR（N）中的节点定时发送HELLO信息
** Protocol Functioning
*** Core Functioning
 - 数据包格式和转发
 - 链路传感（定时发送HELLO信息）
 - 相邻检测
 - MPR选择和MPR信号（MPR Signaling）
 - 拓扑控制信息扩散
 - 路由计算
 - 核心功能的关键：MPR关系
 | Feature                      | Section |
 |------------------------------+---------|
 | Packet format and forwarding |       3 |
 | Information repositories     |       4 |
 | Main addr and multiple if.   |       5 |
 | Hello messages               |       6 |
 | Link sensing                 |       7 |
 | Neighbor detection           |       8 |
 | Topology discovery           |       9 |
 | Routing table computation    |      10 |
 | Node configuration           |      11 |
*** Auxiliary Functioning
 | Feature                  | Section |
 |--------------------------+---------|
 | Non-OLSR interfaces      |      12 |
 | Link-layer notifications |      13 |
 | Advanced link sensing    |      14 |
 | Redundant topology       |      15 |
 | Redundant MPR flooding   |      16 |
** Packet Format and Forwarding
 - piggybacking 捎带
 - 使用统一数据包格式的目的：
   1. 实现协议的可拓展性，即不破坏向后兼容性
   2. 在一次传输中可实现多类信息的捎带确认
   3. 可利用网络中最大帧大小实现优化
 - 嵌入UDP报文传输
*** Protocol and Port Number
 - UDP Port 698
*** Main Address
 - For a node with one interface, the main address of a node, as defined in "OLSR Terminology", MUST be set to the address of that interface.
*** Packet Format
#+BEGIN_SRC 
  0                   1                   2                   3
  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |         Packet Length         |    Packet Sequence Number     |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |  Message Type |     Vtime     |         Message Size          |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                      Originator Address                       |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |  Time To Live |   Hop Count   |    Message Sequence Number    |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                                                               |
  :                            MESSAGE                            :
  |                                                               |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |  Message Type |     Vtime     |         Message Size          |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                      Originator Address                       |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |  Time To Live |   Hop Count   |    Message Sequence Number    |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  |                                                               |
  :                            MESSAGE                            :
  |                                                               |
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  :                                                               :
#+END_SRC
**** Packet Header
 - Packet Length：数据包大小
 - Packet Sequence Number：数据包序列号
 - 如数据包长度小于或等于首部长度，该数据包直接丢弃（在IPv4中，Packet Length < 16）
 - The IP address：在IP首部中，可以获得发包接口的IP地址，故不用添加额外的信息
**** Message Header
 - Message Type：标明信息类型，0-127
 - Vtime：接受到信息的有效时间, validity time = C*(1+a/16)* 2^b  [in seconds]
   - a：the integer represented by the four highest bits of Vtime field
   - b：the integer represented by the four lowest bits of Vtime field
   - C: the proposed value of the scaling factor
 - Message Size：消息的大小，从当前Message Type域到下一个Messgage Type的字节数(or - if there are no following messages - until the end of the packet)
 - Originator Address：信息的原始来源，在转发过程中，不会变化
 - Time To Live：转发的最大跳数，每次转发前减一
 - Hop Count：参与转发的跳数，每次转发前加一
 - Message Sequence Number：原始节点生成信息时产生的唯一的序列号，用于判断该信息是否已经被转发过
*** Packet Processing and Message Flooding
 - 检查每个 Message Header
   - 根据Message Type域，判断信息的下一步处理（the fate of the message）
 - 为避免对消息的重复处理，每个节点维护一个Duplicate Set
   - Duplicate Tuple：(D_addr, D_seq_num, D_retransmitted, D_iface_list, D_time)
     - D_addr：信息的原始发包地址
     - D_seq_num：信息的序列号
     - D_retransmitted：布尔变量，标明信息是否被转发过
     - D_iface_list：接受到该信息的接口集
     - D_time：该Duplicate Tuple的失效时间，失效后必须删除
 - 接收到数据包后的处理流程：
   1. if the Packet Length < or = the size of the packet header, 直接丢弃（discard）
   2. if TTL < or = 0, or 该信息是由当前节点生成，直接丢弃（drop）
   3. 处理条件：
      1. if 在duplicate set中存在元组使得 D_addr = Originator Address, and D_seq_num = Message Sequence Number，则说明该信息已经被处理过，不再重复处理
      2. otherwise, 如果当前节点实现了该信息类型的处理，则根据该信息类型进行处理
   4. 转发条件：
      1. if 在duplicate set中存在元组使得 D_addr = Originator Address, and D_seq_num = Message Sequence Number, and 接收接口地址在D_iface_list中, 则说明该信息已经转发过，不再重复转发
      2. otherwise:
	 1. 如果当前节点实现了该信息类型的转发，则根据该信息类型进行转发
	 2. 否则运行默认转发算法(Default Forwarding Algorithm)
**** Default Forwarding Algorithm
 - 默认转发函数如下：
   1. if 该消息的发送接口不在当前节点的双向相邻节点集中，则转发算法停止，不再转发
   2. if 在duplicate set中存在元组使得 D_addr = Originator Address, and D_seq_num = Message Sequence Number，那么只有满足D_retransmitted is false, and 接受端口地址不在D_iface_list中，才会转发
   3. if 元组不存在，该消息进行进一步的转发
   4. if 发送接口地址在当前节点的MPR selector集中, and TTL > 1, 则该消息必须转发
   5. 更新duplicate set:
      1. if 元组存在，则更新该元组：
	 - D_time    = current time + DUP_HOLD_TIME
	 - The receiving interface (address) is added to D_iface_list
	 - D_retransmitted is set to true if and only if the message  will be retransmitted according to step 4
      2. otherwise an entry in the duplicate set is recorded with:
	 - D_addr    = Originator Address
	 - D_seq_num = Message Sequence Number
	 - D_time    = current time + DUP_HOLD_TIME
	 - D_iface_list contains the receiving interface address
	 - D_retransmitted is set to true if and only if the message will be retransmitted according to step 4
   6. TTL = TTL - 1
   7. hop-count = hop-count + 1
   8. 将消息通过所有接口进行广播
**** Considerations on Processing and Forwarding
 - 处理和转发不同，有不同的限制条件
 - 若消息的类型已知，不能盲目地使用默认转发算法
 - OLSR核心功能中的REQUIRED消息类型：
   - HELLO-messages: performing the task of link sensing, neighbor detection and MPR signaling
   - TC-messages: performing the task of topology declaration (advertisement of link states)
   - MID-messages: performing the task of declaring the presence of multiple interfaces on a node
*** Message Emission and Jitter
 - OLSR控制消息的发送应该避免同时发送，否则会产生碰撞，导致丢包
 - 为避免同时发送控制信息，节点在信息发送中应加入随机的抖动，即：Actual message interval = MESSAGE_INTERVAL - jitter
 - 当节点要转发信息时，应有一个短暂的停顿：Keep message period = jitter
 - 当节点发送控制信息时，可以捎带确认其他信息
 - Notice, that a minimal rate of control messages is imposed.  A node MAY send control messages at a higher rate, if beneficial for a specific deployment.
** Information Repositories
 - 通过OLSR控制信息的交换，每个节点获得网络的信息，这些信息存储在每个节点的信息库中
*** Multiple Interface Association Information Base
 - Interface Association: (I_iface_addr, I_main_addr, I_time)
   - I_iface_addr: an interface address of a node
   - I_main_addr: the main address of this node
   - I_time: the time ai which this tuple expires and MUST be removed
*** Link Sensing: local Link Information Base
 - The local link information base stores information about links to neighbors
**** Link Set:
  - Link Tuples: (L_local_iface_addr, L_neighbor_iface_addr, L_SYM_time, L_ASYM_time, L_time)
    - L_local_iface_addr: the interface address of the local node(i.e., one endpoint of the link)
    - L_neighbor_iface_addr: the interface address of the neighbor node(i.e., the other endpoint of the link)
    - L_SYM_time: the time until which the link is considered symmetric
    - L_ASYM_time: the time until which the neighbor interface is considered heard
    - L_time: the time at which this record expires and MUST be removed
    - 当L_SYM_time和L_ASYM_time都过期时，该链接被视为丢失
    - L_SYM_time用来标志链路的状态，如果未过期，链路必修被声明为对称链路；如果过期，则必须被声明为非对称链路
*** Neighbor Detection: Neighborhood Information Base
**** Neighor Set
 - neighor tuples: (N_neighbor_main_addr, N_status, N_willingness)
   - N_neighbor_main_addr: the main address of a neighbor
   - N_status: specific if the node is NOT_SYM or SYM
   - N_willingness: an integer between 0 and 7, and specifies the node's willingness to traffic on behalf of other nodes
**** 2-hop Neighbor Set
 - 2-hop tuples: (N_neighbor_main_addr, N_2hop_addr, N_time) 描述邻居节点和2跳邻居节点间的对称链路
   - N_neighbor_main_addr: the main address of a neighor
   - N_2hop_addr: the main address of a 2-hop neighbor with a symmetric link to N_neighbor_main_addr
   - N_time: specific the time at which the tuple expires and MUST be removed
**** MPR Set
 - A node maintains a set of neighbors which are selected as MPR. Their main addresses are listed in the MPR Set.
**** MPR Selector Set
 - MPR-selector tuples: (MS_main_addr, MS_time)
   - MS_main_addr: thr main address of a node, which has selected this node as MPR
   - MS_time: specific the time at which the tuple expires and MUST be removed
*** Topology Informaation Base
 - Topology Tuple: (T_dest_addr, T_last_addr, T_seq, T_time)
   - T_dest_addr: the main address of a node, which may be reached in one hop from the node with the main address T_last_addr
   - T_last_addr: a MPR of T_dest_addr
   - T_seq: a sequence number
   - T_time: specific the time at which this tuple expires and MUST be removed
** Main Addresses and Multiple Interfaces
 - Multiple Interface Declaration (MID) messages: 在多接口节点通信中，定义接口的关系和节点主地址
 - 每个节点通过广播MID信息，通知整个网络自身与其他节点的接口配置
 - 每个节点维护整个网络中其他节点的接口信息（从MID信息中获取），并用来计算路由转发表
*** MID Message Format 
 - The proposed format of a MID message is as follows:
 #+BEGIN_SRC 
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                    OLSR Interface Address                     |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                    OLSR Interface Address                     |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                              ...                              |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+       
 #+END_SRC
 - 消息首部的Message Type设为MID_MESSAGE, TTL设为255（maximun value）, Vtime设为MID_HOLD_TIME
 - OLSR Interface Address 中为当前节点除主地址之外的某个OLSR接口的地址
 - 如果一个MID信息空间不足，将生成多个MID信息，以包含所有的接口地址
*** MID Message Generation
 - 在节点中，对所有MID信息的处理必须在一个刷新周期（MID_INTERVAL）内完成
 - 只有一个OLSR接口的节点不发送MID信息
*** MID Message Forwarding
 - MID信息的转发使用默认转发算法(default forwarding algorithm)
*** MID Message Processing
 - 当收到MID信息时，节点将对关联多接口信息集进行更新：
   1. if 该信息不是来自对称相邻节点，直接丢弃
   2. for each 节点地址 in MID信息：
      1. if 关联接口集中存在I_iface_addr = interface address, and I_main_addr = originator address, 则修改元组的I_time为current time + validity time
      2. else 新建元组I_iface_addr = interface address, I_main_addr = originator address, I_time = current time + validity time
*** Resovling a Main Address from an Interface Address 
 - 从接口地址解析主地址
 - 给定一个接口地址：
   1. 如果在关联接口集中存在元组I_iface_addr = interface address, 则主地址为该元组的原始发送地址
   2. 否则主地址为接口地址本身
** HELLO Message Format and Generation
 - HELLO Message 是一种更新本地节点信息集和邻居信息集的常见机制
*** HELLO Message Format
 #+BEGIN_SRC 
 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |          Reserved             |     Htime     |  Willingness  |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   Link Code   |   Reserved    |       Link Message Size       |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                  Neighbor Interface Address                   |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                  Neighbor Interface Address                   |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 :                             .  .  .                           :
 :                                                               :
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |   Link Code   |   Reserved    |       Link Message Size       |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                  Neighbor Interface Address                   |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 |                  Neighbor Interface Address                   |
 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
 :                                                               :
 :                                       :
 #+END_SRC
 - Reserved：保留标志位，必须设为为"0000000000000000"
 - HTime：定义发送HELLO信息的间隔，HELLO emission interval=C*(1+a/16)*2^b  [in seconds]
 - Willingness：节点发送路由信息的意愿，WILL_NEVER/WILL_ALWAYS, 默认为WILL_DEFAULT
 - Link Code: 指定发送节点与following list中相邻节点链接的信息和相邻节点的状态
 - Link Message Size: Link信息的大小（bytes），从当前Link Code到下一个Link Code
**** Link Code as Link Type and Neighbor Type
 - 只考虑Link Code<16时的情况
 #+BEGIN_SRC 
     7       6       5       4       3       2       1       0
 +-------+-------+-------+-------+-------+-------+-------+-------+
 |   0   |   0   |   0   |   0   | Neighbor Type |   Link Type   |
 +-------+-------+-------+-------+-------+-------+-------+-------+
 #+END_SRC
 - The following four "Link Types" are REQUIRED by OLSR:
   - UNSPEC_LINK - indicating that no specific information about the links is given
   - ASYM_LINK - indicating that the links are asymmetric (i.e., the neighbor interface is "heard")
   - SYM_LINK - indicating that the links are symmetric with the interface
   - LOST_LINK - indicating that the links have been lost
 - The following three "Neighbor Types" are REQUIRED by OLSR:
   - SYM_NEIGH - indicating that the neighbors have at least one symmetrical link with this node
   - MPR_NEIGH - indicating that the neighbors have at least one symmetrical link AND have been selected as MPR by the sender
   - NOT_NEIGH - indicating that the nodes are either no longer or have not yet become symmetric neighbors
 - Link Type = SYM_LINK AND Neighbor Type = NOT_NEIGH的link code是无意义的，直接丢弃
*** HELLO Message Generation
 - HELLO信息涉及链路集、邻居集和MPR集的传输，主要任务包括：链路感知(link sensing)、邻域检测(neighbor detection)、MPR选择信号(MPR selection signaling)
 - 节点必须在每个接口上执行链路感知
 - 节点必须告知其所有相邻对称邻居节点，以执行邻居检测
 - HELLO信息必须包括指定节点的链接（相关的链路类型）和所有的邻居节点（包含相关的邻居类型） 
 - Vtime用于邻居节点设置NEIGHB_HOLD_TIME
 - Link Set中的每个元组，其L_local_iface_addr是HELLO将被转发的接口，L_time>=current time
 - L_neighbor_iface_addr将被广播：
   1. 链接类型根据以下内容设置：
      1. if L_SYM_time >= current time (not expired), Link Type = SYM_LINK
      2. else, if  L_ASYM_time >= current time (not expired) AND L_SYM_time < current time (expired), Link Type = ASYM_LINK
      3. else, if if L_ASYM_time < current time (expired) AND L_SYM_time < current time (expired), Link Type = LOST_LINK
   2. 邻居节点类型将根据一下内容设置：
      1. 如果邻居节点地址对应的主地址在MPR集中，Neighbor Type = MPR_NEIGH
      2. 如果主地址在neighbor set中，且N_status == SYM,则Neighbor Type = SYM_NEIGH；否则，Neighbor Type = NOT_NEIGH
 - 对于Neighbor Set中的元组，如果之前没有对应的link tuple被转发过，则把Link Type设为UNSPEC_LINK
 - 每个链路和节点在固定的刷新间隔内必须被引用一次（be cited）
 - 为保持链接的快速变化，HELLO信息发送间隔至少应为HELLO_INTERVAL，小于或等于REFRESH_INTERVAL
 - 为了减小控制信息消失的影响，一个信息应该可以放到一个MAC数据帧中
*** HELLO Message Forwarding
 - HELLO Message不会被转发
*** HELLO Message Processing
 - 节点处理收到的HELLO信息是为了进行链路感知、相邻检查和MPR选择集扩充
** Link Sensing
 - 链路感知填充本地链路信息库
 - 链路感知关注于OLSR接口地址和接口间进行HELLO信息交换的能力
*** Populating the Link Set
**** HELLO Message Processing
 - HELLO信息的Originator Address是发送节点的主地址
 - 收到一个HELLO信息后，Link Set将会更新：
   1. 如果没有链路元组的L_neighbor_iface_addr == Source Address，则创建一个新的元组L_neighbor_iface_addr = Source Address； L_local_iface_addr = Address of the interface，which received the HELLO message； L_SYM_time = current time - 1 (expired)；L_time= current time + validity time
   2. 如果有相应的元组满足条件，则修改元组：
      1. L_ASYM_time = current time + validity time
      2. 如果节点发现收到HELLO信息的接口地址在Link message中，元组将被修改：
	 1. if Link Type is equal to LOST_LINK then L_SYM_time = current time - 1 (i.e., expired)
	 2. if Link Type is equal to SYM_LINK or ASYM_LINK then L_SYM_time = current time + validity time, L_time = L_SYM_time + NEIGHB_HOLD_TIME
   3. L_time = max(L_time, L_ASYM_time)
      - 这使得一个不再对称的链路在一个validity time内仍被广播，并使邻居检测到链路的中断
** Neighbor Detection
 - 
